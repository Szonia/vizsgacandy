import { v4 as uuidv4 } from "uuid";  // UUID gener√°l√°s import√°l√°sa
import { Request, Response } from "express";
import { db } from "../firebase"; // Az adatb√°zis kapcsolat, ami a Firebase Realtime Database-t haszn√°lja
import { ref, get, set } from "firebase/database"; // Hozz√°adva a 'set' import√°l√°sa
import nodemailer from "nodemailer"; // Email k√ºld√©shez sz√ºks√©ges

const ORDERS_COLLECTION = "orders";
const PRODUCTS_REF = "products"; // A term√©kek gy≈±jtem√©ny neve a Realtime Database-ben
const USERS_COLLECTION = "users"; // A felhaszn√°l√≥k gy≈±jtem√©nye

/**
 * üîπ √ñsszes rendel√©s lek√©r√©se
 */
export const getAllOrders = async (req: Request, res: Response) => {
  try {
    const ordersRef = ref(db, ORDERS_COLLECTION);
    const snapshot = await get(ordersRef);
    if (!snapshot.exists()) {
      return res.status(404).json({ error: "Nincs rendel√©s." });
    }
    return res.json(snapshot.val());
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a rendel√©sek lek√©r√©sekor:", error);
    return res.status(500).json({ error: "Hiba t√∂rt√©nt a rendel√©sek lek√©r√©sekor." });
  }
};

/**
 * üîπ Rendel√©s st√°tusz√°nak m√≥dos√≠t√°sa (admin)
 */
export const updateOrderStatus = async (req: Request, res: Response) => {
  const { id } = req.params;
  const { status } = req.body;

  const validStatuses = ["pending", "shipped", "delivered"];
  if (!validStatuses.includes(status)) {
    return res.status(400).json({ error: "√ârv√©nytelen st√°tusz." });
  }

  try {
    const orderRef = ref(db, `${ORDERS_COLLECTION}/${id}`);
    const orderSnapshot = await get(orderRef);
    const order = orderSnapshot.val();

    // Ellen≈ërizz√ºk, hogy a rendel√©s l√©tezik
    if (!order) {
      return res.status(404).json({ error: "Rendel√©s nem tal√°lhat√≥." });
    }

    // Friss√≠tj√ºk a rendel√©s st√°tusz√°t
    await set(orderRef, { ...order, status });

    // √ârtes√≠t√©s k√ºld√©se a felhaszn√°l√≥nak (ha sz√ºks√©ges)
    if (status === "shipped" || status === "delivered") {
      const userRef = ref(db, `users/${order.userId}`);
      const userSnapshot = await get(userRef);
      const user = userSnapshot.val();

      if (user && user.email) {
        // K√ºldj√ºnk email √©rtes√≠t√©st
        const transporter = nodemailer.createTransport({
          service: "gmail", // Haszn√°lhatod a k√≠v√°nt email szolg√°ltat√≥t
          auth: {
            user: process.env.EMAIL_USER,  // Az email c√≠med
            pass: process.env.EMAIL_PASS,  // Az email jelszavad
          },
        });

        const mailOptions = {
          from: process.env.EMAIL_USER,  // Az email c√≠med
          to: user.email,  // A felhaszn√°l√≥ email c√≠me
          subject: "Rendel√©s st√°tusz friss√≠t√©se",
          text: `A rendel√©sed st√°tusza: ${status}. K√©rj√ºk, k√∂vesd nyomon a rendel√©sedet a web√°ruh√°zban.`,
        };

        transporter.sendMail(mailOptions, (error, info) => {
          if (error) {
            console.error("‚ùå Hiba az email k√ºld√©sekor:", error);
          } else {
            console.log("‚úÖ Email sikeresen elk√ºldve:", info.response);
          }
        });
      }
    }

    res.json({ message: "Rendel√©s st√°tusza friss√≠tve.", status });
  } catch (error) {
    console.error("‚ùå Hiba a rendel√©s friss√≠t√©sekor:", error);
    res.status(500).json({ error: "Hiba t√∂rt√©nt a rendel√©s friss√≠t√©sekor." });
  }
};

/**
 * üîπ Rendel√©s lead√°sa (kos√°rb√≥l rendel√©s Realtime Database-ba) ‚Äì kieg√©sz√≠tve a c√≠m adatokkal
 */
export const createOrder = async (req: Request, res: Response) => {
  const { userId } = req.params;
  const { items, totalPrice, shippingAddress } = req.body;  // Hozz√°adva shippingAddress

  if (!items || items.length === 0) {
    return res.status(400).json({ error: "A rendel√©shez legal√°bb egy term√©k sz√ºks√©ges." });
  }

  if (!shippingAddress || !shippingAddress.street || !shippingAddress.city || !shippingAddress.zipCode) {
    return res.status(400).json({ error: "Hi√°nyz√≥ c√≠madatok!" });
  }

  try {
    // Ellen≈ërz√©s, hogy minden term√©k l√©tezik a Realtime Database-ben
    const productRefs = items.map((item: any) =>
      get(ref(db, `${PRODUCTS_REF}/${item.productId}`))
    );
    const productSnapshots = await Promise.all(productRefs);

    // Ellen≈ërz√©s, hogy a term√©kek l√©teznek
    const invalidProducts = productSnapshots.filter(snapshot => !snapshot.exists());
    if (invalidProducts.length > 0) {
      return res.status(404).json({ error: `N√©h√°ny term√©k nem tal√°lhat√≥: ${invalidProducts.map(p => p.key).join(', ')}` });
    }

    // Term√©kek ellen≈ërz√©se √©s friss√≠t√©se a rendel√©shez
    const updatedItems = items.map(item => {
      const productSnapshot = productSnapshots.find(snapshot => snapshot.key === item.productId);
      const product = productSnapshot?.val();
      return { ...item, productName: product?.name, price: product?.price };
    });

    const newOrder = {
      userId,
      items: updatedItems,
      totalPrice,
      shippingAddress,  // Hozz√°adva a rendel√©shez a c√≠m
      status: "pending",
      createdAt: new Date(),
    };

    // √öj rendel√©s hozz√°ad√°sa a Realtime Database-be egy UUID-val az ID helyett
    const orderId = uuidv4();  // UUID gener√°l√°s
    const orderRef = ref(db, `${ORDERS_COLLECTION}/${orderId}`);
    await set(orderRef, newOrder);

    res.status(201).json({
      message: "Rendel√©s sikeresen leadva.",
      orderId,
      orderDetails: newOrder, // Visszak√ºldj√ºk a rendel√©s r√©szleteit
    });
  } catch (error) {
    console.error("‚ùå Hiba a rendel√©s lead√°sakor:", error);
    res.status(500).json({ error: "Hiba t√∂rt√©nt a rendel√©s lead√°sakor." });
  }
};

/**
 * üîπ Felhaszn√°l√≥ saj√°t rendel√©seinek lek√©r√©se
 */
export const getUserOrders = async (req: Request, res: Response) => {
  const { userId } = req.params;

  try {
    const ordersRef = ref(db, `${ORDERS_COLLECTION}`);
    const snapshot = await get(ordersRef);
    if (!snapshot.exists()) {
      return res.status(404).json({ error: "Nincs rendel√©s." });
    }

    const orders = snapshot.val();
    const userOrders = Object.keys(orders)
      .filter(orderId => orders[orderId].userId === userId)
      .map(orderId => ({ id: orderId, ...orders[orderId] }));

    if (userOrders.length === 0) {
      return res.status(404).json({ error: "Nincsenek rendel√©sei." });
    }

    res.status(200).json(userOrders);
  } catch (error) {
    console.error("‚ùå Hiba a rendel√©s lek√©r√©sekor:", error);
    res.status(500).json({ error: "Hiba t√∂rt√©nt a rendel√©s lek√©r√©sekor." });
  }
};
